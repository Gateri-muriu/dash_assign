from dash import Dash, html, dcc, Input, Output  # Add Input and Output
import pandas as pd
import plotly.express as px  # Add plotly express import

# Read the CSV data from URL
spacex_df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv")
max_value = spacex_df['Payload Mass (kg)'].max()
min_value = spacex_df['Payload Mass (kg)'].min()

# Initialize the Dash app
app = Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.H1('SpaceX Launch Records Dashboard'),
    dcc.Dropdown(
        id='site-dropdown',
        options=[
            {'label': 'All Sites', 'value': 'ALL'},
            {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
            {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
            {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
            {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
        ],
        value='ALL',
        placeholder='Select a Launch Site here',
        searchable=True
    ),
    html.Br(),
    html.Div(
        [
            dcc.Graph(id='success-pie-chart'),
            html.Br(),
            html.P("Payload range (Kg):"),
            dcc.RangeSlider(
                id='payload-slider',
                min=0, max=10000, step=1000,
                marks={0: '0', 100: '100'},
                value=[min_value, max_value]
            ),
            dcc.Graph(id='success-payload-scatter-chart'),
        ]
    )
])

# Define callback functions

@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value')]
)
def get_pie_chart(entered_site):
    filtered_df = spacex_df
    if entered_site != 'ALL':
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
    fig = px.pie(
        filtered_df,
        names='class',
        title='Success rate for all launch sites' if entered_site == 'ALL' else f"Total Success Launches for site {entered_site}"
    )
    return fig

@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def scatter(entered_site, payload):
    filtered_df = spacex_df[
        spacex_df['Payload Mass (kg)'].between(payload[0], payload[1])
    ]
    if entered_site != 'ALL':
        filtered_df = filtered_df[filtered_df['Launch Site'] == entered_site]
    fig = px.scatter(
        filtered_df,
        x='Payload Mass (kg)',
        y='class',
        color='Booster Version Category',
        title='Success count on Payload mass for all sites' if entered_site == 'ALL' else f"Success count on Payload mass for site {entered_site}"
    )
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
